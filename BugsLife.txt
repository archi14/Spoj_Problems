#include <iostream>
#include <bits/stdc++.h>
using namespace std;
// refer to bipartite graphs to understand the code.
// Bipartite graph basically divide the vertex into two groups, which is our goal here, to divide the bugs into two sex and same sex should not communicate
// If the graph is bipartite then no suspicion else suspicious.
class Graph{
	list <int> *l;
	int v;
	public:
	Graph(int x)
	{
		l = new list<int>[x+1];
		v = x;
	}
	
	void addEdge(int u,int v)
	{
		l[u].push_back(v);
		l[v].push_back(u);
	}
	
	bool BFS(int i,int color[])
	{
		color[i]=1;
		queue<int> q;
		q.push(i);
		while(!q.empty())
		{
			int edge = q.front();
			q.pop();
			for(auto it=l[edge].begin();it!=l[edge].end();it++)
			{
				if(color[*it]==-1)
				{
					color[*it]=1-color[edge];
					q.push(*it);
				}else if(color[*it]==color[edge])
				{
					return false;
				}
				
			}
		}
		return true;
	}
};
	int main()
	{	
		int t;
		cin>>t;
		for (int q=0;q<t;q++)
		{
				int n,k;
				cin>>n>>k;
				Graph g(n);
				for(int i=0;i<k;i++)
				{
					int u,v;
					cin>>u>>v;
					g.addEdge(u,v);
				}
				
			
			int color[n+1];
			int f=1;
			for(int i=1;i<=n;i++)
			{
				color[i]=-1;
			}
			for(int i=1;i<=n;i++)
			{
				if(color[i]==-1)
				{
					if((g.BFS(i,color))==false)
					{
						f=0;
						break;
					}
				}
			}
			
			cout<<"Scenario #"<<q+1<<":"<<endl;
			if(f)
			{
				
				cout<<"No suspicious bugs found!"<<endl;
			}else
			{
				cout<<"Suspicious bugs found!"<<endl;
			}
		}
	}


		


